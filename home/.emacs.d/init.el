;;;; Packages

;; Turn on the built-in package manager, add package repos.
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;; Bootstrap the better package manager.
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)

;; Support hiding mode indicators.
(use-package delight)

;; Navigable editing history.
(use-package undo-tree :delight)

;; Enable vim bindings.
(use-package evil
  :init
    (setq evil-emacs-state-cursor '("red" box))
    (setq evil-split-window-below t)
    (setq evil-vsplit-window-right t)
    (setq evil-want-C-u-scroll t) 
  :config
    (evil-mode 1)

    ;; Make window switching easier.

    ;; Navigate by visual lines.
    (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
    (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line))

;; Discoverable shortcuts. TODO
(use-package which-key
  :config
    (which-key-mode)
  :delight)

(use-package org)
(use-package haskell-mode)


;;;; Themes

;; These themes are a bit busier than I'd like but support lots of modes.
(use-package doom-themes
  :config
    (setq doom-themes-enable-bold nil)
    (setq doom-themes-enable-italic nil))

;; Support rotating between dark and light theme.
(use-package theme-looper
  :config
    (theme-looper-set-theme-set
      '(doom-one
        doom-tomorrow-day))
    (theme-looper-enable-next-theme))


;;;; Settings

;; Use UTF-8 and unix line endings by default.
(prefer-coding-system 'utf-8-unix)

;; Use a temp file for stuff generated by the GUI customizer.
(setq custom-file (make-temp-file "emacs-custom.el"))

;; Don't show startup screen.
(setq inhibit-startup-screen t)

;; Disable tool bar and scroll bars.
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; Highlight matching parens.
(show-paren-mode 1)

;; Turn off mouse highlighting.
; (setq mouse-highlight nil)

;; Better buffer name disambiguation.
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
