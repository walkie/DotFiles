;;;; Packages

;; Turn on the built-in package manager, add package repos.
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;; Bootstrap the better package manager.
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)

;; Support hiding mode indicators.
(use-package delight)

;; Navigable editing history.
(use-package undo-tree :delight)

;; Enable vim bindings.
(use-package evil
  :init
    ; (setq evil-emacs-state-cursor '("red" box))
    (setq evil-split-window-below t)
    (setq evil-vsplit-window-right t)
    (setq evil-want-C-u-scroll t) 
  :config
    (evil-mode 1))

;; Define keybindings that integrate nicely with evil.
(use-package general
  :config
    ;; Normal mode key bindings.
    (general-define-key
      :states 'normal
      ;; Make window switching easier.
      "H" 'evil-window-left
      "J" 'evil-window-down
      "K" 'evil-window-up
      "L" 'evil-window-right
      ;; Navigate by visual lines.
      "j" 'evil-next-visual-line
      "k" 'evil-previous-visual-line
      ;; Open buffer switcher.
      "B" 'buffer-menu)
    (general-define-key
      :states '(normal visual insert emacs)
      :prefix "SPC"
      :non-normal-prefix "C-SPC"
      "SPC" (general-simulate-key "M-x" :which-key "execute command (M-x)")))

;; Discoverable shortcuts. TODO
(use-package which-key
  :config
    (which-key-mode)
  :delight)

;; Auto-completion framework.
(use-package company
  :init
    ; Only pop-up when I ask for it.
    (setq company-idle-delay nil)
  :config
    (global-company-mode)
    ; Configure "tab-n-go", tab and shift-tab to cycle candidates.
    (company-tng-configure-default)
    ; Trigger auto-completion with tab.
    (general-define-key
      :states 'insert
      "TAB" 'company-indent-or-complete-common)
  :delight)

;; Get your shit together.
(use-package org
  :init
    ;; Look for todo items in all files in this directory.
    (setq org-agenda-files '("~/Dropbox/Org"))
    ;; Make headings a bit less ugly.
    (setq org-fontify-whole-heading-line t)
    ;; Open files in the current buffer.
    (setq org-link-frame-setup '((file . find-file)))
    ;; Start with all sections expanded.
    (setq org-startup-folded nil)
  :config
    (general-define-key
      :states 'normal
      "<" '(org-metaleft :which-key "decrease heading")
      ">" '(org-metaright :which-key "increase heading")
      "t" '(org-todo :which-key "cycle todo state")
      "TAB" '(org-cycle :which-key "cycle visibility")
      "RET" '(org-open-at-point :which-key "open link")
      "DEL" '(org-mark-ring-goto :which-key "return from link"))
    (general-define-key
      :states 'normal
      :prefix "SPC"
      "o" '(:ignore t :which-key "org")
      "oa" '(org-agenda :which-key "open agenda")
      "ol" '(org-insert-link :which-key "edit/insert link")))

(use-package haskell-mode)

;; A nice light theme with good org-mode support.
(use-package leuven-theme
  :config
    (load-theme 'leuven t))


;;;; Settings

;; Use UTF-8 and unix line endings by default.
(prefer-coding-system 'utf-8-unix)

;; Use a temp file for stuff generated by the GUI customizer.
(setq custom-file (make-temp-file "emacs-custom.el"))

;; Don't show startup screen.
(setq inhibit-startup-screen t)

;; Disable tool bar and scroll bars.
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; Maximize window by default.
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; Highlight matching parens.
(show-paren-mode 1)
(setq show-paren-delay 0)

;; Turn off mouse highlighting.
; (setq mouse-highlight nil)

;; Disable "smart" indenting.
(setq-default electric-indent-inhibit t)

;; Better buffer name disambiguation.
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)

;; Automatically follow symlinks.
(setq vc-follow-symlinks t)
